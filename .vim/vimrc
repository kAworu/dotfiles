set nocompatible

set path=.,./include,/usr/include,/usr/local/include,,
set pastetoggle=<F10>
let mapleader = "\<space>"
set sm

set complete=.,w,b,u,t,i

set nomodeline
set modelines=0

set backspace=indent,eol,start

" Update term title but restore old title after leaving Vim
set title
set titleold=
set shortmess=aoOtTI
set wildmenu
set wildmode=longest:full,full

set viminfo='20,\"500,h
set history=50

set fileencodings=utf-8,latin1,default
set fileformats=unix

set shiftwidth=4
set tabstop=4
set expandtab
set smarttab
set autoindent
set preserveindent
set smartindent

" Do not redraw screen in the middle of a macro. Makes them complete faster.
set lazyredraw
" With both on, searches with no capitals are case insensitive, while searches
" with a capital characters are case sensitive.
set smartcase
set ignorecase
" Persistent undo, even if you close and reopen Vim. Super great when combined
" with the undotree plugin.
set undofile

set list
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
  let &showbreak="↪ "
  let &listchars="tab:←-,trail:•,extends:⇉,precedes:⇇,nbsp:␣"
else
  let showbreak="> "
  set listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:_
endif
" see https://vi.stackexchange.com/a/19821
autocmd BufNewFile,BufRead * call matchadd('SpecialKey', '\s\+')
autocmd BufNewFile,BufRead * call matchadd('NonText', '\n\+')

set selection=inclusive
set virtualedit=block

set number
set numberwidth=3
set cursorline
set ruler
set showcmd

set hlsearch
set incsearch

set scrolloff=3
set sidescrolloff=5
set scrolljump=1

set foldcolumn=2
set foldmethod=marker

set completeopt=longest,menu,preview

set diffopt+=vertical

set timeoutlen=250

set shell=/bin/sh
set grepprg=grep\ -nH\ $*

" english spell check by default (:set spell)
setlocal spelllang=en

" split navigation
map <Tab> <C-w>w
map <S-Tab> <C-w>W
" quickfix navigation
nmap <C-n> :cnext<return>
nmap <C-p> :cprev<return>
nmap <C-o> :copen<return>

if has("autocmd")
    autocmd FileType text setlocal textwidth=78
    autocmd FileType man    set nolist
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   execute "normal! g`\"" |
                \ endif
    " When editing a new file, load skeleton if any.
    " If we find <+FILENAME+> replace it by the filename.
    " If we find <+HEADERNAME+> replace it by the filename uppercase with .
    "       replaced by _ (foo.h become FOO_H).
    " If we find <+CLASSNAME+> replace it by the filename without the extensions.
    autocmd BufNewFile *
                \ let skel = $HOME . "/.vim/skeletons/skel." . expand("%:e") |
                \ if filereadable(skel) |
                \   execute "silent! 0read " . skel |
                \   let fn = expand("%") |
                \   let hn = substitute(expand("%"), "\\w", "\\u\\0", "g") |
                \   let hn = substitute(hn, "\\.", "_", "g") |
                \   let hn = substitute(hn, "/", "_", "g") |
                \   let cn = expand("%:t:r") |
                \   %s/<+FILENAME+>/\=fn/Ige |
                \   %s/<+HEADERNAME+>/\=hn/Ige |
                \   %s/<+CLASSNAME+>/\=cn/Ige |
                \   unlet fn hn cn |
                \ endif |
                \ unlet skel |
                \ goto 1
endif " has autocmd

" skeleton template use <+KEY+>
nnoremap § <esc>/<+.\{-1,}+><return>c/+>/e<return>
inoremap § <esc>/<+.\{-1,}+><return>c/+>/e<return>

" lightline config
set laststatus=2
set noshowmode
let g:lightline = {
    \ 'active': {
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
    \ },
    \ 'component': {
    \   'charvaluehex': '0x%B'
    \ },
    \ }

" theme config
set background=dark
syntax enable
filetype plugin indent on
if &background == "dark"
    packadd gruvbox
    let g:gruvbox_italic = 1
    let g:gruvbox_invert_selection = 0
    let g:gruvbox_contrast_dark = 'hard'
    " spell checking hack, see https://github.com/morhetz/gruvbox/issues/175
    let g:gruvbox_guisp_fallback = "bg"
    colorscheme gruvbox
    let g:lightline.colorscheme = 'gruvbox'
else
    packadd papercolor
    colorscheme PaperColor
    let g:lightline.colorscheme = 'PaperColor'
endif

if (has("termguicolors"))
    set termguicolors
    " vim hardcodes background color erase even if the terminfo file does
    " not contain bce (not to mention that libvte based terminals
    " incorrectly contain bce in their terminfo files). This causes
    " incorrect background rendering when using a color theme with a
    " background color.
    let &t_ut=''
    " vim / tmux bullshit, :help term
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Load all packages on Vim >= 8
packloadall

" syntastic
let g:syntastic_enable_signs = 1
let g:syntastic_auto_loc_list = 1

" gist
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1

" mail
au BufRead ~/.tmp/mutt* set textwidth=72

" fugitive
nmap <C-k> :Ggrep 
vnoremap <C-k> y/<C-r>"<return>:silent Ggrep <C-r>0<return>:copen<return>:redraw!<return>

" NERDTree
"Show hidden files
let NERDTreeShowHidden=1
" combine NERDTreeFind with NERDTreeToggle,
" see https://stackoverflow.com/a/33465522
nmap <F2> :NERDTreeToggle %<return>

" external command paths
let uname = substitute(system('uname'), "\n", "", "")
if uname == "OpenBSD"
    let Tlist_Ctags_Cmd = "/usr/local/bin/ectags"
elseif uname == "Darwin"
    let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
    " https://www.reddit.com/r/vim/comments/a4yzyt/g_characters_prefixing_directory_and_file_names/
    let g:NERDTreeNodeDelimiter = "\u00a0"
endif
" vim:ft=vim:sw=2:ts=2:et
