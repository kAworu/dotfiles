runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
set nocompatible

set path=.,./include,/usr/include,/usr/local/include,,
colorscheme elflord
set pastetoggle=<F10>
set sm

set complete=.,w,b,u,t,i

set nomodeline
set modelines=0

set backspace=indent,eol,start

set title
set shortmess=aoOtTI
set wildmenu
set wildmode=longest:full,full

set viminfo='20,\"500,h
set history=50

set fileencodings=utf-8,latin1,default
set fileformats=unix

set shiftwidth=4
set tabstop=4
set expandtab
set smarttab
set autoindent
set preserveindent
set smartindent

let showbreak="> "
set list
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
  let &listchars="tab:←-,trail:•,extends:⇉,precedes:⇇,nbsp:␣"
else
  set listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:_
endif

set selection=inclusive
set virtualedit=block

set number
set numberwidth=3
set nocursorline
set ruler
set showcmd

set hlsearch
set incsearch

set scrolloff=3
set sidescrolloff=5
set scrolljump=1

set foldcolumn=2
set foldmethod=marker

set completeopt=longest,menu,preview

set diffopt+=vertical

set timeoutlen=250

set shell=/bin/sh
set grepprg=grep\ -nH\ $*

" english spell check by default (:set spell)
setlocal spelllang=en

" buffer navigation
map <C-j> <esc>:bnext<return>
map <C-k> <esc>:bprevious<return>
map <C-q> <esc>:bdelete<return>
" split navigation
map <Tab> <C-w>w
map <S-Tab> <C-w>W

if has("autocmd")
    filetype plugin indent on

    autocmd FileType text setlocal textwidth=78
    autocmd FileType c      set omnifunc=ccomplete#Complete
    autocmd FileType css    set omnifunc=csscomplete#CompleteCSS
    autocmd FileType html   set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType man    set nolist
    autocmd FileType php    set omnifunc=phpcomplete#CompletePHP
    autocmd FileType python set omnifunc=pythoncomplete#Complete
    autocmd FileType ruby   set omnifunc=rubycomplete#Complete
    autocmd FileType sql    set omnifunc=sqlcomplete#Complete
    autocmd FileType xml    set omnifunc=xmlcomplete#CompleteTags
    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   execute "normal! g`\"" |
                \ endif
    " When editing a new file, load skeleton if any.
    " If we find <+FILENAME+> replace it by the filename.
    " If we find <+HEADERNAME+> replace it by the filename uppercase with .
    "       replaced by _ (foo.h become FOO_H).
    " If we find <+CLASSNAME+> replace it by the filename without the extensions.
    autocmd BufNewFile *
                \ let skel = $HOME . "/.vim/skeletons/skel." . expand("%:e") |
                \ if filereadable(skel) |
                \   execute "silent! 0read " . skel |
                \   let fn = expand("%") |
                \   let hn = substitute(expand("%"), "\\w", "\\u\\0", "g") |
                \   let hn = substitute(hn, "\\.", "_", "g") |
                \   let hn = substitute(hn, "/", "_", "g") |
                \   let cn = expand("%:t:r") |
                \   %s/<+FILENAME+>/\=fn/Ige |
                \   %s/<+HEADERNAME+>/\=hn/Ige |
                \   %s/<+CLASSNAME+>/\=cn/Ige |
                \   unlet fn hn cn |
                \ endif |
                \ unlet skel |
                \ goto 1
endif " has autocmd
syntax enable
" quick fix for line numbers
hi LineNr ctermfg=DarkGrey

" Nice statusbar
set laststatus=2
set statusline=
set statusline+=%-3.3n\                             " buffer number
set statusline+=%f\                                 " file name
set statusline+=%h%m%r%w                            " flags
set statusline+=\[%{strlen(&ft)?&ft:'none'},        " filetype
set statusline+=%{&encoding},                       " encoding
set statusline+=%{&fileformat}]\                    " file format
"set statusline+=%{strftime('%a\ %b\ %e\ %H:%M')}    " hour
set statusline+=%=                                  " right align
"set statusline+=%{VimBuddy()}\                      " :-)

set statusline+=0x%-5B\                             " current char
set statusline+=%-10.(%l,%c%V%)\ %<%P               " offset

" statusline colors
if version >= 700
    " default statusline highlight (colors)
    hi StatusLine   ctermbg=Yellow ctermfg=Black
    " default non-current statusline highlight
    hi StatusLineNC ctermbg=Cyan ctermfg=Black
    " statusline highlight when in INSERT mode
  au InsertEnter * hi StatusLine ctermbg=Red ctermfg=Black
    " leaving INSERT mode reset to default
    au InsertLeave * hi StatusLine ctermbg=Yellow ctermfg=Black
endif


" skeleton template use <+KEY+>
nnoremap § <esc>/<+.\{-1,}+><return>c/+>/e<return>
inoremap § <esc>/<+.\{-1,}+><return>c/+>/e<return>

" use XHTML and CSS with :TOhtml
let use_xhtml=1
let html_use_css=1
let html_ignore_folding=1
let html_use_encoding="UTF-8"

" Java
let java_highlight_all=1
let java_allow_cpp_keywords=1

" Python
let python_highlight_builtins=1
let python_highlight_exceptions=1
let python_highlight_numbers=1
let python_highlight_space_errors=1

" Ruby
let ruby_operators=1
let g:rubycomplete_buffer_loading=1
let g:rubycomplete_classes_in_global=1

" syntastic
let g:syntastic_enable_signs = 1
let g:syntastic_auto_loc_list = 1

" gist
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1

" mail
au BufRead ~/.tmp/mutt* set textwidth=72

if exists(":nohlsearch")
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" Taglist config
let uname = substitute(system('uname'), "\n", "", "")
if uname == "OpenBSD"
    let Tlist_Ctags_Cmd = "/usr/local/bin/ectags"
endif

" NERDTree
map <F2> :NERDTreeToggle<return>
"Show hidden files
let NERDTreeShowHidden=1
"autopen and focus cursor in the opened file
"autocmd VimEnter * NERDTree
"autocmd VimEnter * wincmd p

" vim:ft=vim:sw=2:ts=2:et
